/**
 * Copyright 2020 Dynatrace LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id "com.diffplug.spotless" version "6.0.0"
}

group = "com.dynatrace.opentelemetry.metric"
version = "1.0.0"

repositories {
    mavenCentral()
}

// define the version we are building against
def minimumOtelVersion = "1.16.0"
// define the version the tests are run against
def testAgainstOtelVersion = "1.20.1"

dependencies {
    // compile against minimumOtelVersion. We only need
    // to update this if we want to use features not in the current version.
    // This dependency will not be part of the JAR produced
    // Therefore, the actual OTel SDK package will need to be supplied in the consuming build.gradle
    compileOnly platform("io.opentelemetry:opentelemetry-bom:${minimumOtelVersion}")
    compileOnly('io.opentelemetry:opentelemetry-sdk')
    compileOnly('io.opentelemetry:opentelemetry-sdk-metrics')

    implementation("com.google.guava:guava:30.0-jre")
    implementation('com.dynatrace.metric.util:dynatrace-metric-utils-java:1.6.+')

    // we can run tests against whatever OTel version we want, as long as minimumOtelVersion
    // and testAgainstOtelVersion are compatible.
    testImplementation("io.opentelemetry:opentelemetry-sdk-testing:${testAgainstOtelVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.1")
    testImplementation("org.assertj:assertj-core:3.11.1")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.7.1")
    testImplementation("org.mockito:mockito-core:3.12.4")
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    java {
        googleJavaFormat()
    }
}
